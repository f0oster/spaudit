// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_runs.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAuditRun = `-- name: CreateAuditRun :one
INSERT INTO audit_runs (job_id, site_id, started_at, audit_trigger)
VALUES (?1, ?2, ?3, ?4)
RETURNING audit_run_id
`

type CreateAuditRunParams struct {
	JobID        string         `json:"job_id"`
	SiteID       int64          `json:"site_id"`
	StartedAt    time.Time      `json:"started_at"`
	AuditTrigger sql.NullString `json:"audit_trigger"`
}

func (q *Queries) CreateAuditRun(ctx context.Context, arg CreateAuditRunParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAuditRun,
		arg.JobID,
		arg.SiteID,
		arg.StartedAt,
		arg.AuditTrigger,
	)
	var audit_run_id int64
	err := row.Scan(&audit_run_id)
	return audit_run_id, err
}

const getAuditRun = `-- name: GetAuditRun :one
SELECT audit_run_id, job_id, site_id, started_at, completed_at, audit_trigger
FROM audit_runs
WHERE audit_run_id = ?1
`

type GetAuditRunRow struct {
	AuditRunID   int64          `json:"audit_run_id"`
	JobID        string         `json:"job_id"`
	SiteID       int64          `json:"site_id"`
	StartedAt    time.Time      `json:"started_at"`
	CompletedAt  sql.NullTime   `json:"completed_at"`
	AuditTrigger sql.NullString `json:"audit_trigger"`
}

func (q *Queries) GetAuditRun(ctx context.Context, auditRunID int64) (GetAuditRunRow, error) {
	row := q.db.QueryRowContext(ctx, getAuditRun, auditRunID)
	var i GetAuditRunRow
	err := row.Scan(
		&i.AuditRunID,
		&i.JobID,
		&i.SiteID,
		&i.StartedAt,
		&i.CompletedAt,
		&i.AuditTrigger,
	)
	return i, err
}
