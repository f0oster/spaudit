// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: jobs.sql

package db

import (
	"context"
	"database/sql"
)

const completeJob = `-- name: CompleteJob :exec
UPDATE jobs 
SET status = 'completed', result = ?1, completed_at = CURRENT_TIMESTAMP
WHERE job_id = ?2
`

type CompleteJobParams struct {
	Result sql.NullString `json:"result"`
	JobID  string         `json:"job_id"`
}

func (q *Queries) CompleteJob(ctx context.Context, arg CompleteJobParams) error {
	_, err := q.db.ExecContext(ctx, completeJob, arg.Result, arg.JobID)
	return err
}

const createJob = `-- name: CreateJob :exec
INSERT INTO jobs (
  job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, started_at
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9
)
`

type CreateJobParams struct {
	JobID     string         `json:"job_id"`
	JobType   string         `json:"job_type"`
	Status    string         `json:"status"`
	SiteID    sql.NullInt64  `json:"site_id"`
	SiteUrl   string         `json:"site_url"`
	ItemGuid  sql.NullString `json:"item_guid"`
	Progress  sql.NullInt64  `json:"progress"`
	StateJson sql.NullString `json:"state_json"`
	StartedAt sql.NullTime   `json:"started_at"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.db.ExecContext(ctx, createJob,
		arg.JobID,
		arg.JobType,
		arg.Status,
		arg.SiteID,
		arg.SiteUrl,
		arg.ItemGuid,
		arg.Progress,
		arg.StateJson,
		arg.StartedAt,
	)
	return err
}

const deleteOldJobs = `-- name: DeleteOldJobs :exec
DELETE FROM jobs
WHERE started_at < datetime('now', '-1 day') 
AND status IN ('completed', 'failed')
`

func (q *Queries) DeleteOldJobs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldJobs)
	return err
}

const deleteOldJobsForSite = `-- name: DeleteOldJobsForSite :exec
DELETE FROM jobs
WHERE site_id = ?1
AND started_at < datetime('now', '-1 day') 
AND status IN ('completed', 'failed')
`

func (q *Queries) DeleteOldJobsForSite(ctx context.Context, siteID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteOldJobsForSite, siteID)
	return err
}

const failJob = `-- name: FailJob :exec
UPDATE jobs 
SET status = 'failed', error = ?1, completed_at = CURRENT_TIMESTAMP
WHERE job_id = ?2
`

type FailJobParams struct {
	Error sql.NullString `json:"error"`
	JobID string         `json:"job_id"`
}

func (q *Queries) FailJob(ctx context.Context, arg FailJobParams) error {
	_, err := q.db.ExecContext(ctx, failJob, arg.Error, arg.JobID)
	return err
}

const getJob = `-- name: GetJob :one
SELECT job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, result, error, started_at, completed_at
FROM jobs
WHERE job_id = ?1
`

type GetJobRow struct {
	JobID       string         `json:"job_id"`
	JobType     string         `json:"job_type"`
	Status      string         `json:"status"`
	SiteID      sql.NullInt64  `json:"site_id"`
	SiteUrl     string         `json:"site_url"`
	ItemGuid    sql.NullString `json:"item_guid"`
	Progress    sql.NullInt64  `json:"progress"`
	StateJson   sql.NullString `json:"state_json"`
	Result      sql.NullString `json:"result"`
	Error       sql.NullString `json:"error"`
	StartedAt   sql.NullTime   `json:"started_at"`
	CompletedAt sql.NullTime   `json:"completed_at"`
}

func (q *Queries) GetJob(ctx context.Context, jobID string) (GetJobRow, error) {
	row := q.db.QueryRowContext(ctx, getJob, jobID)
	var i GetJobRow
	err := row.Scan(
		&i.JobID,
		&i.JobType,
		&i.Status,
		&i.SiteID,
		&i.SiteUrl,
		&i.ItemGuid,
		&i.Progress,
		&i.StateJson,
		&i.Result,
		&i.Error,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getLastCompletedJobForSite = `-- name: GetLastCompletedJobForSite :one
SELECT job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, result, error, started_at, completed_at
FROM jobs
WHERE (site_id = ?1 OR (site_id IS NULL AND site_url = ?2)) AND status = 'completed'
ORDER BY completed_at DESC
LIMIT 1
`

type GetLastCompletedJobForSiteParams struct {
	SiteID  sql.NullInt64 `json:"site_id"`
	SiteUrl string        `json:"site_url"`
}

type GetLastCompletedJobForSiteRow struct {
	JobID       string         `json:"job_id"`
	JobType     string         `json:"job_type"`
	Status      string         `json:"status"`
	SiteID      sql.NullInt64  `json:"site_id"`
	SiteUrl     string         `json:"site_url"`
	ItemGuid    sql.NullString `json:"item_guid"`
	Progress    sql.NullInt64  `json:"progress"`
	StateJson   sql.NullString `json:"state_json"`
	Result      sql.NullString `json:"result"`
	Error       sql.NullString `json:"error"`
	StartedAt   sql.NullTime   `json:"started_at"`
	CompletedAt sql.NullTime   `json:"completed_at"`
}

func (q *Queries) GetLastCompletedJobForSite(ctx context.Context, arg GetLastCompletedJobForSiteParams) (GetLastCompletedJobForSiteRow, error) {
	row := q.db.QueryRowContext(ctx, getLastCompletedJobForSite, arg.SiteID, arg.SiteUrl)
	var i GetLastCompletedJobForSiteRow
	err := row.Scan(
		&i.JobID,
		&i.JobType,
		&i.Status,
		&i.SiteID,
		&i.SiteUrl,
		&i.ItemGuid,
		&i.Progress,
		&i.StateJson,
		&i.Result,
		&i.Error,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listActiveJobs = `-- name: ListActiveJobs :many
SELECT job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, result, error, started_at, completed_at
FROM jobs
WHERE status IN ('pending', 'running')
ORDER BY started_at DESC
`

type ListActiveJobsRow struct {
	JobID       string         `json:"job_id"`
	JobType     string         `json:"job_type"`
	Status      string         `json:"status"`
	SiteID      sql.NullInt64  `json:"site_id"`
	SiteUrl     string         `json:"site_url"`
	ItemGuid    sql.NullString `json:"item_guid"`
	Progress    sql.NullInt64  `json:"progress"`
	StateJson   sql.NullString `json:"state_json"`
	Result      sql.NullString `json:"result"`
	Error       sql.NullString `json:"error"`
	StartedAt   sql.NullTime   `json:"started_at"`
	CompletedAt sql.NullTime   `json:"completed_at"`
}

func (q *Queries) ListActiveJobs(ctx context.Context) ([]ListActiveJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listActiveJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveJobsRow
	for rows.Next() {
		var i ListActiveJobsRow
		if err := rows.Scan(
			&i.JobID,
			&i.JobType,
			&i.Status,
			&i.SiteID,
			&i.SiteUrl,
			&i.ItemGuid,
			&i.Progress,
			&i.StateJson,
			&i.Result,
			&i.Error,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveJobsForSite = `-- name: ListActiveJobsForSite :many
SELECT job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, result, error, started_at, completed_at
FROM jobs
WHERE site_id = ?1 AND status IN ('pending', 'running')
ORDER BY started_at DESC
`

type ListActiveJobsForSiteRow struct {
	JobID       string         `json:"job_id"`
	JobType     string         `json:"job_type"`
	Status      string         `json:"status"`
	SiteID      sql.NullInt64  `json:"site_id"`
	SiteUrl     string         `json:"site_url"`
	ItemGuid    sql.NullString `json:"item_guid"`
	Progress    sql.NullInt64  `json:"progress"`
	StateJson   sql.NullString `json:"state_json"`
	Result      sql.NullString `json:"result"`
	Error       sql.NullString `json:"error"`
	StartedAt   sql.NullTime   `json:"started_at"`
	CompletedAt sql.NullTime   `json:"completed_at"`
}

func (q *Queries) ListActiveJobsForSite(ctx context.Context, siteID sql.NullInt64) ([]ListActiveJobsForSiteRow, error) {
	rows, err := q.db.QueryContext(ctx, listActiveJobsForSite, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveJobsForSiteRow
	for rows.Next() {
		var i ListActiveJobsForSiteRow
		if err := rows.Scan(
			&i.JobID,
			&i.JobType,
			&i.Status,
			&i.SiteID,
			&i.SiteUrl,
			&i.ItemGuid,
			&i.Progress,
			&i.StateJson,
			&i.Result,
			&i.Error,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllJobs = `-- name: ListAllJobs :many
SELECT job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, result, error, started_at, completed_at
FROM jobs
ORDER BY started_at DESC
LIMIT 50
`

type ListAllJobsRow struct {
	JobID       string         `json:"job_id"`
	JobType     string         `json:"job_type"`
	Status      string         `json:"status"`
	SiteID      sql.NullInt64  `json:"site_id"`
	SiteUrl     string         `json:"site_url"`
	ItemGuid    sql.NullString `json:"item_guid"`
	Progress    sql.NullInt64  `json:"progress"`
	StateJson   sql.NullString `json:"state_json"`
	Result      sql.NullString `json:"result"`
	Error       sql.NullString `json:"error"`
	StartedAt   sql.NullTime   `json:"started_at"`
	CompletedAt sql.NullTime   `json:"completed_at"`
}

func (q *Queries) ListAllJobs(ctx context.Context) ([]ListAllJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllJobsRow
	for rows.Next() {
		var i ListAllJobsRow
		if err := rows.Scan(
			&i.JobID,
			&i.JobType,
			&i.Status,
			&i.SiteID,
			&i.SiteUrl,
			&i.ItemGuid,
			&i.Progress,
			&i.StateJson,
			&i.Result,
			&i.Error,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllJobsForSite = `-- name: ListAllJobsForSite :many
SELECT job_id, job_type, status, site_id, site_url, item_guid, progress, state_json, result, error, started_at, completed_at
FROM jobs
WHERE site_id = ?1
ORDER BY started_at DESC
LIMIT 50
`

type ListAllJobsForSiteRow struct {
	JobID       string         `json:"job_id"`
	JobType     string         `json:"job_type"`
	Status      string         `json:"status"`
	SiteID      sql.NullInt64  `json:"site_id"`
	SiteUrl     string         `json:"site_url"`
	ItemGuid    sql.NullString `json:"item_guid"`
	Progress    sql.NullInt64  `json:"progress"`
	StateJson   sql.NullString `json:"state_json"`
	Result      sql.NullString `json:"result"`
	Error       sql.NullString `json:"error"`
	StartedAt   sql.NullTime   `json:"started_at"`
	CompletedAt sql.NullTime   `json:"completed_at"`
}

func (q *Queries) ListAllJobsForSite(ctx context.Context, siteID sql.NullInt64) ([]ListAllJobsForSiteRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllJobsForSite, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllJobsForSiteRow
	for rows.Next() {
		var i ListAllJobsForSiteRow
		if err := rows.Scan(
			&i.JobID,
			&i.JobType,
			&i.Status,
			&i.SiteID,
			&i.SiteUrl,
			&i.ItemGuid,
			&i.Progress,
			&i.StateJson,
			&i.Result,
			&i.Error,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobStatus = `-- name: UpdateJobStatus :exec
UPDATE jobs 
SET status = ?1, progress = ?2, state_json = ?3
WHERE job_id = ?4
`

type UpdateJobStatusParams struct {
	Status    string         `json:"status"`
	Progress  sql.NullInt64  `json:"progress"`
	StateJson sql.NullString `json:"state_json"`
	JobID     string         `json:"job_id"`
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg UpdateJobStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateJobStatus,
		arg.Status,
		arg.Progress,
		arg.StateJson,
		arg.JobID,
	)
	return err
}
