// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lists.sql

package db

import (
	"context"
	"database/sql"
)

const getList = `-- name: GetList :one
SELECT site_id, list_id, web_id, title, url, base_template, item_count, has_unique, audit_run_id
FROM lists WHERE site_id = ?1 AND list_id = ?2
`

type GetListParams struct {
	SiteID int64  `json:"site_id"`
	ListID string `json:"list_id"`
}

type GetListRow struct {
	SiteID       int64          `json:"site_id"`
	ListID       string         `json:"list_id"`
	WebID        string         `json:"web_id"`
	Title        string         `json:"title"`
	Url          sql.NullString `json:"url"`
	BaseTemplate sql.NullInt64  `json:"base_template"`
	ItemCount    sql.NullInt64  `json:"item_count"`
	HasUnique    sql.NullBool   `json:"has_unique"`
	AuditRunID   sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) GetList(ctx context.Context, arg GetListParams) (GetListRow, error) {
	row := q.db.QueryRowContext(ctx, getList, arg.SiteID, arg.ListID)
	var i GetListRow
	err := row.Scan(
		&i.SiteID,
		&i.ListID,
		&i.WebID,
		&i.Title,
		&i.Url,
		&i.BaseTemplate,
		&i.ItemCount,
		&i.HasUnique,
		&i.AuditRunID,
	)
	return i, err
}

const getListsByWebID = `-- name: GetListsByWebID :many
SELECT site_id, list_id, web_id, title, url, base_template, item_count, has_unique, audit_run_id
FROM lists WHERE site_id = ?1 AND web_id = ?2
ORDER BY title
`

type GetListsByWebIDParams struct {
	SiteID int64  `json:"site_id"`
	WebID  string `json:"web_id"`
}

type GetListsByWebIDRow struct {
	SiteID       int64          `json:"site_id"`
	ListID       string         `json:"list_id"`
	WebID        string         `json:"web_id"`
	Title        string         `json:"title"`
	Url          sql.NullString `json:"url"`
	BaseTemplate sql.NullInt64  `json:"base_template"`
	ItemCount    sql.NullInt64  `json:"item_count"`
	HasUnique    sql.NullBool   `json:"has_unique"`
	AuditRunID   sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) GetListsByWebID(ctx context.Context, arg GetListsByWebIDParams) ([]GetListsByWebIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getListsByWebID, arg.SiteID, arg.WebID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsByWebIDRow
	for rows.Next() {
		var i GetListsByWebIDRow
		if err := rows.Scan(
			&i.SiteID,
			&i.ListID,
			&i.WebID,
			&i.Title,
			&i.Url,
			&i.BaseTemplate,
			&i.ItemCount,
			&i.HasUnique,
			&i.AuditRunID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListsForSite = `-- name: GetListsForSite :many
SELECT l.site_id, l.list_id, l.web_id, l.title, l.url, l.item_count, l.has_unique, w.title AS web_title
FROM lists l
JOIN webs w ON w.site_id = l.site_id AND w.web_id = l.web_id
WHERE l.site_id = ?1
ORDER BY w.title, l.title
`

type GetListsForSiteRow struct {
	SiteID    int64          `json:"site_id"`
	ListID    string         `json:"list_id"`
	WebID     string         `json:"web_id"`
	Title     string         `json:"title"`
	Url       sql.NullString `json:"url"`
	ItemCount sql.NullInt64  `json:"item_count"`
	HasUnique sql.NullBool   `json:"has_unique"`
	WebTitle  sql.NullString `json:"web_title"`
}

func (q *Queries) GetListsForSite(ctx context.Context, siteID int64) ([]GetListsForSiteRow, error) {
	rows, err := q.db.QueryContext(ctx, getListsForSite, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsForSiteRow
	for rows.Next() {
		var i GetListsForSiteRow
		if err := rows.Scan(
			&i.SiteID,
			&i.ListID,
			&i.WebID,
			&i.Title,
			&i.Url,
			&i.ItemCount,
			&i.HasUnique,
			&i.WebTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertList = `-- name: InsertList :exec
INSERT INTO lists (site_id, list_id, web_id, title, url, base_template, item_count, has_unique, audit_run_id)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9)
`

type InsertListParams struct {
	SiteID       int64          `json:"site_id"`
	ListID       string         `json:"list_id"`
	WebID        string         `json:"web_id"`
	Title        string         `json:"title"`
	Url          sql.NullString `json:"url"`
	BaseTemplate sql.NullInt64  `json:"base_template"`
	ItemCount    sql.NullInt64  `json:"item_count"`
	HasUnique    sql.NullBool   `json:"has_unique"`
	AuditRunID   sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) InsertList(ctx context.Context, arg InsertListParams) error {
	_, err := q.db.ExecContext(ctx, insertList,
		arg.SiteID,
		arg.ListID,
		arg.WebID,
		arg.Title,
		arg.Url,
		arg.BaseTemplate,
		arg.ItemCount,
		arg.HasUnique,
		arg.AuditRunID,
	)
	return err
}

const listsAll = `-- name: ListsAll :many
SELECT l.site_id, l.list_id, l.web_id, l.title, l.url, l.item_count, l.has_unique, w.title AS web_title, s.site_url
FROM lists l
JOIN webs w ON w.site_id = l.site_id AND w.web_id = l.web_id
JOIN sites s ON l.site_id = s.site_id
ORDER BY s.site_url, w.title, l.title
`

type ListsAllRow struct {
	SiteID    int64          `json:"site_id"`
	ListID    string         `json:"list_id"`
	WebID     string         `json:"web_id"`
	Title     string         `json:"title"`
	Url       sql.NullString `json:"url"`
	ItemCount sql.NullInt64  `json:"item_count"`
	HasUnique sql.NullBool   `json:"has_unique"`
	WebTitle  sql.NullString `json:"web_title"`
	SiteUrl   string         `json:"site_url"`
}

func (q *Queries) ListsAll(ctx context.Context) ([]ListsAllRow, error) {
	rows, err := q.db.QueryContext(ctx, listsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListsAllRow
	for rows.Next() {
		var i ListsAllRow
		if err := rows.Scan(
			&i.SiteID,
			&i.ListID,
			&i.WebID,
			&i.Title,
			&i.Url,
			&i.ItemCount,
			&i.HasUnique,
			&i.WebTitle,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listsWithUnique = `-- name: ListsWithUnique :many
SELECT l.site_id, l.list_id, l.web_id, l.title, l.url, l.item_count, l.has_unique, w.title AS web_title, s.site_url
FROM lists l
JOIN webs w ON w.site_id = l.site_id AND w.web_id = l.web_id
JOIN sites s ON l.site_id = s.site_id
WHERE l.has_unique = 1
ORDER BY s.site_url, w.title, l.title
`

type ListsWithUniqueRow struct {
	SiteID    int64          `json:"site_id"`
	ListID    string         `json:"list_id"`
	WebID     string         `json:"web_id"`
	Title     string         `json:"title"`
	Url       sql.NullString `json:"url"`
	ItemCount sql.NullInt64  `json:"item_count"`
	HasUnique sql.NullBool   `json:"has_unique"`
	WebTitle  sql.NullString `json:"web_title"`
	SiteUrl   string         `json:"site_url"`
}

func (q *Queries) ListsWithUnique(ctx context.Context) ([]ListsWithUniqueRow, error) {
	rows, err := q.db.QueryContext(ctx, listsWithUnique)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListsWithUniqueRow
	for rows.Next() {
		var i ListsWithUniqueRow
		if err := rows.Scan(
			&i.SiteID,
			&i.ListID,
			&i.WebID,
			&i.Title,
			&i.Url,
			&i.ItemCount,
			&i.HasUnique,
			&i.WebTitle,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listsWithUniqueForSite = `-- name: ListsWithUniqueForSite :many
SELECT l.site_id, l.list_id, l.web_id, l.title, l.url, l.item_count, l.has_unique, w.title AS web_title
FROM lists l
JOIN webs w ON w.site_id = l.site_id AND w.web_id = l.web_id
WHERE l.site_id = ?1 AND l.has_unique = 1
ORDER BY w.title, l.title
`

type ListsWithUniqueForSiteRow struct {
	SiteID    int64          `json:"site_id"`
	ListID    string         `json:"list_id"`
	WebID     string         `json:"web_id"`
	Title     string         `json:"title"`
	Url       sql.NullString `json:"url"`
	ItemCount sql.NullInt64  `json:"item_count"`
	HasUnique sql.NullBool   `json:"has_unique"`
	WebTitle  sql.NullString `json:"web_title"`
}

func (q *Queries) ListsWithUniqueForSite(ctx context.Context, siteID int64) ([]ListsWithUniqueForSiteRow, error) {
	rows, err := q.db.QueryContext(ctx, listsWithUniqueForSite, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListsWithUniqueForSiteRow
	for rows.Next() {
		var i ListsWithUniqueForSiteRow
		if err := rows.Scan(
			&i.SiteID,
			&i.ListID,
			&i.WebID,
			&i.Title,
			&i.Url,
			&i.ItemCount,
			&i.HasUnique,
			&i.WebTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
