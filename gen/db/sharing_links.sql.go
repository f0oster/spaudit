// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sharing_links.sql

package db

import (
	"context"
	"database/sql"
)

const addMemberToLink = `-- name: AddMemberToLink :exec
INSERT INTO sharing_link_members (site_id, link_id, principal_id, audit_run_id)
VALUES (?1, ?2, ?3, ?4)
`

type AddMemberToLinkParams struct {
	SiteID      int64         `json:"site_id"`
	LinkID      string        `json:"link_id"`
	PrincipalID int64         `json:"principal_id"`
	AuditRunID  sql.NullInt64 `json:"audit_run_id"`
}

func (q *Queries) AddMemberToLink(ctx context.Context, arg AddMemberToLinkParams) error {
	_, err := q.db.ExecContext(ctx, addMemberToLink,
		arg.SiteID,
		arg.LinkID,
		arg.PrincipalID,
		arg.AuditRunID,
	)
	return err
}

const clearMembersForLink = `-- name: ClearMembersForLink :exec
DELETE FROM sharing_link_members WHERE site_id = ?1 AND link_id = ?2
`

type ClearMembersForLinkParams struct {
	SiteID int64  `json:"site_id"`
	LinkID string `json:"link_id"`
}

func (q *Queries) ClearMembersForLink(ctx context.Context, arg ClearMembersForLinkParams) error {
	_, err := q.db.ExecContext(ctx, clearMembersForLink, arg.SiteID, arg.LinkID)
	return err
}

const getAllSharingLinks = `-- name: GetAllSharingLinks :many
SELECT site_id, principal_id, login_name, title, email
FROM principals 
WHERE site_id = ?1
  AND login_name LIKE '%SharingLinks.%.%'
  AND login_name IS NOT NULL
`

type GetAllSharingLinksRow struct {
	SiteID      int64          `json:"site_id"`
	PrincipalID int64          `json:"principal_id"`
	LoginName   sql.NullString `json:"login_name"`
	Title       sql.NullString `json:"title"`
	Email       sql.NullString `json:"email"`
}

// Find all principals with any SharingLinks patterns in login_name
func (q *Queries) GetAllSharingLinks(ctx context.Context, siteID int64) ([]GetAllSharingLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSharingLinks, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSharingLinksRow
	for rows.Next() {
		var i GetAllSharingLinksRow
		if err := rows.Scan(
			&i.SiteID,
			&i.PrincipalID,
			&i.LoginName,
			&i.Title,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlexibleSharingLinks = `-- name: GetFlexibleSharingLinks :many
SELECT site_id, principal_id, login_name, title, email
FROM principals 
WHERE site_id = ?1
  AND login_name LIKE '%SharingLinks.%.Flexible.%'
  AND login_name IS NOT NULL
`

type GetFlexibleSharingLinksRow struct {
	SiteID      int64          `json:"site_id"`
	PrincipalID int64          `json:"principal_id"`
	LoginName   sql.NullString `json:"login_name"`
	Title       sql.NullString `json:"title"`
	Email       sql.NullString `json:"email"`
}

// Find principals with Flexible sharing link patterns in login_name
func (q *Queries) GetFlexibleSharingLinks(ctx context.Context, siteID int64) ([]GetFlexibleSharingLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, getFlexibleSharingLinks, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFlexibleSharingLinksRow
	for rows.Next() {
		var i GetFlexibleSharingLinksRow
		if err := rows.Scan(
			&i.SiteID,
			&i.PrincipalID,
			&i.LoginName,
			&i.Title,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemSensitivityLabel = `-- name: GetItemSensitivityLabel :one
SELECT 
  site_id,
  item_guid,
  label_id,
  display_name,
  owner_email,
  set_date,
  assignment_method,
  has_irm_protection,
  content_bits,
  label_flags,
  discovered_at,
  promotion_version,
  label_hash
FROM sensitivity_labels
WHERE site_id = ?1 AND item_guid = ?2
`

type GetItemSensitivityLabelParams struct {
	SiteID   int64  `json:"site_id"`
	ItemGuid string `json:"item_guid"`
}

type GetItemSensitivityLabelRow struct {
	SiteID           int64          `json:"site_id"`
	ItemGuid         string         `json:"item_guid"`
	LabelID          sql.NullString `json:"label_id"`
	DisplayName      sql.NullString `json:"display_name"`
	OwnerEmail       sql.NullString `json:"owner_email"`
	SetDate          sql.NullTime   `json:"set_date"`
	AssignmentMethod sql.NullString `json:"assignment_method"`
	HasIrmProtection sql.NullBool   `json:"has_irm_protection"`
	ContentBits      sql.NullInt64  `json:"content_bits"`
	LabelFlags       sql.NullInt64  `json:"label_flags"`
	DiscoveredAt     sql.NullTime   `json:"discovered_at"`
	PromotionVersion sql.NullInt64  `json:"promotion_version"`
	LabelHash        sql.NullString `json:"label_hash"`
}

func (q *Queries) GetItemSensitivityLabel(ctx context.Context, arg GetItemSensitivityLabelParams) (GetItemSensitivityLabelRow, error) {
	row := q.db.QueryRowContext(ctx, getItemSensitivityLabel, arg.SiteID, arg.ItemGuid)
	var i GetItemSensitivityLabelRow
	err := row.Scan(
		&i.SiteID,
		&i.ItemGuid,
		&i.LabelID,
		&i.DisplayName,
		&i.OwnerEmail,
		&i.SetDate,
		&i.AssignmentMethod,
		&i.HasIrmProtection,
		&i.ContentBits,
		&i.LabelFlags,
		&i.DiscoveredAt,
		&i.PromotionVersion,
		&i.LabelHash,
	)
	return i, err
}

const getLinkIDByUrlKindScope = `-- name: GetLinkIDByUrlKindScope :one
SELECT link_id
FROM sharing_links
WHERE site_id = ?1
  AND file_folder_unique_id = ?2
  AND url       = ?3
  AND link_kind = ?4
  AND scope     = ?5
LIMIT 1
`

type GetLinkIDByUrlKindScopeParams struct {
	SiteID             int64          `json:"site_id"`
	FileFolderUniqueID sql.NullString `json:"file_folder_unique_id"`
	Url                sql.NullString `json:"url"`
	LinkKind           sql.NullInt64  `json:"link_kind"`
	Scope              sql.NullInt64  `json:"scope"`
}

func (q *Queries) GetLinkIDByUrlKindScope(ctx context.Context, arg GetLinkIDByUrlKindScopeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getLinkIDByUrlKindScope,
		arg.SiteID,
		arg.FileFolderUniqueID,
		arg.Url,
		arg.LinkKind,
		arg.Scope,
	)
	var link_id string
	err := row.Scan(&link_id)
	return link_id, err
}

const getRecipientLimits = `-- name: GetRecipientLimits :one
SELECT 
  site_id,
  check_permissions,
  grant_direct_access,
  share_link,
  share_link_with_defer_redeem
FROM recipient_limits
WHERE site_id = ?1
`

type GetRecipientLimitsRow struct {
	SiteID                   int64          `json:"site_id"`
	CheckPermissions         sql.NullString `json:"check_permissions"`
	GrantDirectAccess        sql.NullString `json:"grant_direct_access"`
	ShareLink                sql.NullString `json:"share_link"`
	ShareLinkWithDeferRedeem sql.NullString `json:"share_link_with_defer_redeem"`
}

func (q *Queries) GetRecipientLimits(ctx context.Context, siteID int64) (GetRecipientLimitsRow, error) {
	row := q.db.QueryRowContext(ctx, getRecipientLimits, siteID)
	var i GetRecipientLimitsRow
	err := row.Scan(
		&i.SiteID,
		&i.CheckPermissions,
		&i.GrantDirectAccess,
		&i.ShareLink,
		&i.ShareLinkWithDeferRedeem,
	)
	return i, err
}

const getSensitivityLabelsForSite = `-- name: GetSensitivityLabelsForSite :many
SELECT 
  site_id,
  item_guid,
  label_id,
  display_name,
  owner_email,
  set_date,
  assignment_method,
  has_irm_protection,
  content_bits,
  label_flags,
  discovered_at,
  promotion_version,
  label_hash
FROM sensitivity_labels
WHERE site_id = ?1
  AND label_id IS NOT NULL
ORDER BY discovered_at DESC
`

type GetSensitivityLabelsForSiteRow struct {
	SiteID           int64          `json:"site_id"`
	ItemGuid         string         `json:"item_guid"`
	LabelID          sql.NullString `json:"label_id"`
	DisplayName      sql.NullString `json:"display_name"`
	OwnerEmail       sql.NullString `json:"owner_email"`
	SetDate          sql.NullTime   `json:"set_date"`
	AssignmentMethod sql.NullString `json:"assignment_method"`
	HasIrmProtection sql.NullBool   `json:"has_irm_protection"`
	ContentBits      sql.NullInt64  `json:"content_bits"`
	LabelFlags       sql.NullInt64  `json:"label_flags"`
	DiscoveredAt     sql.NullTime   `json:"discovered_at"`
	PromotionVersion sql.NullInt64  `json:"promotion_version"`
	LabelHash        sql.NullString `json:"label_hash"`
}

func (q *Queries) GetSensitivityLabelsForSite(ctx context.Context, siteID int64) ([]GetSensitivityLabelsForSiteRow, error) {
	rows, err := q.db.QueryContext(ctx, getSensitivityLabelsForSite, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSensitivityLabelsForSiteRow
	for rows.Next() {
		var i GetSensitivityLabelsForSiteRow
		if err := rows.Scan(
			&i.SiteID,
			&i.ItemGuid,
			&i.LabelID,
			&i.DisplayName,
			&i.OwnerEmail,
			&i.SetDate,
			&i.AssignmentMethod,
			&i.HasIrmProtection,
			&i.ContentBits,
			&i.LabelFlags,
			&i.DiscoveredAt,
			&i.PromotionVersion,
			&i.LabelHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSharingAbilities = `-- name: GetSharingAbilities :one
SELECT 
  site_id,
  can_stop_sharing,
  anonymous_link_abilities,
  anyone_link_abilities,
  organization_link_abilities,
  people_sharing_link_abilities,
  direct_sharing_abilities
FROM sharing_abilities
WHERE site_id = ?1
`

type GetSharingAbilitiesRow struct {
	SiteID                     int64          `json:"site_id"`
	CanStopSharing             sql.NullBool   `json:"can_stop_sharing"`
	AnonymousLinkAbilities     sql.NullString `json:"anonymous_link_abilities"`
	AnyoneLinkAbilities        sql.NullString `json:"anyone_link_abilities"`
	OrganizationLinkAbilities  sql.NullString `json:"organization_link_abilities"`
	PeopleSharingLinkAbilities sql.NullString `json:"people_sharing_link_abilities"`
	DirectSharingAbilities     sql.NullString `json:"direct_sharing_abilities"`
}

func (q *Queries) GetSharingAbilities(ctx context.Context, siteID int64) (GetSharingAbilitiesRow, error) {
	row := q.db.QueryRowContext(ctx, getSharingAbilities, siteID)
	var i GetSharingAbilitiesRow
	err := row.Scan(
		&i.SiteID,
		&i.CanStopSharing,
		&i.AnonymousLinkAbilities,
		&i.AnyoneLinkAbilities,
		&i.OrganizationLinkAbilities,
		&i.PeopleSharingLinkAbilities,
		&i.DirectSharingAbilities,
	)
	return i, err
}

const getSharingGovernance = `-- name: GetSharingGovernance :one
SELECT 
  site_id,
  tenant_id,
  tenant_display_name,
  sharepoint_site_id,
  anonymous_link_expiration_restriction_days,
  anyone_link_track_users,
  can_add_external_principal,
  can_add_internal_principal,
  block_people_picker_and_sharing,
  can_request_access_for_grant_access,
  site_ib_mode,
  site_ib_segment_ids,
  enforce_ib_segment_filtering
FROM sharing_governance
WHERE site_id = ?1
`

type GetSharingGovernanceRow struct {
	SiteID                                 int64          `json:"site_id"`
	TenantID                               sql.NullString `json:"tenant_id"`
	TenantDisplayName                      sql.NullString `json:"tenant_display_name"`
	SharepointSiteID                       sql.NullString `json:"sharepoint_site_id"`
	AnonymousLinkExpirationRestrictionDays sql.NullInt64  `json:"anonymous_link_expiration_restriction_days"`
	AnyoneLinkTrackUsers                   sql.NullBool   `json:"anyone_link_track_users"`
	CanAddExternalPrincipal                sql.NullBool   `json:"can_add_external_principal"`
	CanAddInternalPrincipal                sql.NullBool   `json:"can_add_internal_principal"`
	BlockPeoplePickerAndSharing            sql.NullBool   `json:"block_people_picker_and_sharing"`
	CanRequestAccessForGrantAccess         sql.NullBool   `json:"can_request_access_for_grant_access"`
	SiteIbMode                             sql.NullString `json:"site_ib_mode"`
	SiteIbSegmentIds                       sql.NullString `json:"site_ib_segment_ids"`
	EnforceIbSegmentFiltering              sql.NullBool   `json:"enforce_ib_segment_filtering"`
}

func (q *Queries) GetSharingGovernance(ctx context.Context, siteID int64) (GetSharingGovernanceRow, error) {
	row := q.db.QueryRowContext(ctx, getSharingGovernance, siteID)
	var i GetSharingGovernanceRow
	err := row.Scan(
		&i.SiteID,
		&i.TenantID,
		&i.TenantDisplayName,
		&i.SharepointSiteID,
		&i.AnonymousLinkExpirationRestrictionDays,
		&i.AnyoneLinkTrackUsers,
		&i.CanAddExternalPrincipal,
		&i.CanAddInternalPrincipal,
		&i.BlockPeoplePickerAndSharing,
		&i.CanRequestAccessForGrantAccess,
		&i.SiteIbMode,
		&i.SiteIbSegmentIds,
		&i.EnforceIbSegmentFiltering,
	)
	return i, err
}

const getSharingLinkMembers = `-- name: GetSharingLinkMembers :many
SELECT 
  p.site_id,
  p.principal_id,
  p.title,
  p.login_name,
  p.email,
  p.principal_type
FROM sharing_link_members slm
JOIN principals p ON slm.site_id = p.site_id AND slm.principal_id = p.principal_id
WHERE slm.site_id = ?1 AND slm.link_id = ?2
ORDER BY p.title
`

type GetSharingLinkMembersParams struct {
	SiteID int64  `json:"site_id"`
	LinkID string `json:"link_id"`
}

type GetSharingLinkMembersRow struct {
	SiteID        int64          `json:"site_id"`
	PrincipalID   int64          `json:"principal_id"`
	Title         sql.NullString `json:"title"`
	LoginName     sql.NullString `json:"login_name"`
	Email         sql.NullString `json:"email"`
	PrincipalType int64          `json:"principal_type"`
}

// Get all members (principals) for a specific sharing link
func (q *Queries) GetSharingLinkMembers(ctx context.Context, arg GetSharingLinkMembersParams) ([]GetSharingLinkMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getSharingLinkMembers, arg.SiteID, arg.LinkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSharingLinkMembersRow
	for rows.Next() {
		var i GetSharingLinkMembersRow
		if err := rows.Scan(
			&i.SiteID,
			&i.PrincipalID,
			&i.Title,
			&i.LoginName,
			&i.Email,
			&i.PrincipalType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSharingLinksForList = `-- name: GetSharingLinksForList :many
SELECT 
  sl.site_id,
  sl.link_id,
  sl.item_guid,
  sl.file_folder_unique_id,
  sl.url,
  sl.link_kind,
  sl.scope,
  sl.is_active,
  sl.is_default,
  sl.is_edit_link,
  sl.is_review_link,
  sl.created_at,
  sl.last_modified_at,
  sl.total_members_count,
  (SELECT COUNT(*) FROM sharing_link_members WHERE site_id = sl.site_id AND link_id = sl.link_id) as actual_members_count,
  i.name as item_name,
  i.url as item_url,
  i.is_file,
  i.is_folder,
  cb.title as created_by_title,
  cb.login_name as created_by_login,
  mb.title as modified_by_title,
  mb.login_name as modified_by_login
FROM sharing_links sl
LEFT JOIN items i ON (sl.site_id = i.site_id AND (sl.item_guid = i.item_guid OR sl.file_folder_unique_id = i.item_guid))
LEFT JOIN principals cb ON sl.site_id = cb.site_id AND sl.created_by_principal_id = cb.principal_id
LEFT JOIN principals mb ON sl.site_id = mb.site_id AND sl.last_modified_by_principal_id = mb.principal_id
WHERE sl.site_id = ?1 AND i.list_id = ?2
  AND sl.is_active = 1
ORDER BY sl.created_at DESC, sl.link_id
`

type GetSharingLinksForListParams struct {
	SiteID int64  `json:"site_id"`
	ListID string `json:"list_id"`
}

type GetSharingLinksForListRow struct {
	SiteID             int64          `json:"site_id"`
	LinkID             string         `json:"link_id"`
	ItemGuid           sql.NullString `json:"item_guid"`
	FileFolderUniqueID sql.NullString `json:"file_folder_unique_id"`
	Url                sql.NullString `json:"url"`
	LinkKind           sql.NullInt64  `json:"link_kind"`
	Scope              sql.NullInt64  `json:"scope"`
	IsActive           sql.NullBool   `json:"is_active"`
	IsDefault          sql.NullBool   `json:"is_default"`
	IsEditLink         sql.NullBool   `json:"is_edit_link"`
	IsReviewLink       sql.NullBool   `json:"is_review_link"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	LastModifiedAt     sql.NullTime   `json:"last_modified_at"`
	TotalMembersCount  sql.NullInt64  `json:"total_members_count"`
	ActualMembersCount int64          `json:"actual_members_count"`
	ItemName           sql.NullString `json:"item_name"`
	ItemUrl            sql.NullString `json:"item_url"`
	IsFile             sql.NullBool   `json:"is_file"`
	IsFolder           sql.NullBool   `json:"is_folder"`
	CreatedByTitle     sql.NullString `json:"created_by_title"`
	CreatedByLogin     sql.NullString `json:"created_by_login"`
	ModifiedByTitle    sql.NullString `json:"modified_by_title"`
	ModifiedByLogin    sql.NullString `json:"modified_by_login"`
}

// Get all sharing links for items in a specific list with item and principal details
func (q *Queries) GetSharingLinksForList(ctx context.Context, arg GetSharingLinksForListParams) ([]GetSharingLinksForListRow, error) {
	rows, err := q.db.QueryContext(ctx, getSharingLinksForList, arg.SiteID, arg.ListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSharingLinksForListRow
	for rows.Next() {
		var i GetSharingLinksForListRow
		if err := rows.Scan(
			&i.SiteID,
			&i.LinkID,
			&i.ItemGuid,
			&i.FileFolderUniqueID,
			&i.Url,
			&i.LinkKind,
			&i.Scope,
			&i.IsActive,
			&i.IsDefault,
			&i.IsEditLink,
			&i.IsReviewLink,
			&i.CreatedAt,
			&i.LastModifiedAt,
			&i.TotalMembersCount,
			&i.ActualMembersCount,
			&i.ItemName,
			&i.ItemUrl,
			&i.IsFile,
			&i.IsFolder,
			&i.CreatedByTitle,
			&i.CreatedByLogin,
			&i.ModifiedByTitle,
			&i.ModifiedByLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSharingLink = `-- name: InsertSharingLink :one
INSERT INTO sharing_links (
  site_id,
  link_id,
  item_guid,
  file_folder_unique_id,
  url,
  link_kind,
  scope,
  is_active,
  is_default,
  is_edit_link,
  is_review_link,
  is_inherited,
  created_at,
  created_by_principal_id,
  last_modified_at,
  last_modified_by_principal_id,
  total_members_count,
  -- Enhanced governance fields
  expiration,
  password_last_modified,
  password_last_modified_by_principal_id,
  has_external_guest_invitees,
  track_link_users,
  is_ephemeral,
  is_unhealthy,
  is_address_bar_link,
  is_create_only_link,
  is_forms_link,
  is_main_link,
  is_manage_list_link,
  allows_anonymous_access,
  embeddable,
  limit_use_to_application,
  restrict_to_existing_relationships,
  blocks_download,
  requires_password,
  restricted_membership,
  inherited_from,
  share_id,
  share_token,
  sharing_link_status,
  audit_run_id
)
VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8,
  ?9,
  ?10,
  ?11,
  ?12,
  ?13,
  ?14,
  ?15,
  ?16,
  ?17,
  -- Enhanced governance fields
  ?18,
  ?19,
  ?20,
  ?21,
  ?22,
  ?23,
  ?24,
  ?25,
  ?26,
  ?27,
  ?28,
  ?29,
  ?30,
  ?31,
  ?32,
  ?33,
  ?34,
  ?35,
  ?36,
  ?37,
  ?38,
  ?39,
  ?40,
  ?41
)
RETURNING link_id
`

type InsertSharingLinkParams struct {
	SiteID                            int64          `json:"site_id"`
	LinkID                            string         `json:"link_id"`
	ItemGuid                          sql.NullString `json:"item_guid"`
	FileFolderUniqueID                sql.NullString `json:"file_folder_unique_id"`
	Url                               sql.NullString `json:"url"`
	LinkKind                          sql.NullInt64  `json:"link_kind"`
	Scope                             sql.NullInt64  `json:"scope"`
	IsActive                          sql.NullBool   `json:"is_active"`
	IsDefault                         sql.NullBool   `json:"is_default"`
	IsEditLink                        sql.NullBool   `json:"is_edit_link"`
	IsReviewLink                      sql.NullBool   `json:"is_review_link"`
	IsInherited                       sql.NullBool   `json:"is_inherited"`
	CreatedAt                         sql.NullTime   `json:"created_at"`
	CreatedByPrincipalID              sql.NullInt64  `json:"created_by_principal_id"`
	LastModifiedAt                    sql.NullTime   `json:"last_modified_at"`
	LastModifiedByPrincipalID         sql.NullInt64  `json:"last_modified_by_principal_id"`
	TotalMembersCount                 sql.NullInt64  `json:"total_members_count"`
	Expiration                        sql.NullTime   `json:"expiration"`
	PasswordLastModified              sql.NullTime   `json:"password_last_modified"`
	PasswordLastModifiedByPrincipalID sql.NullInt64  `json:"password_last_modified_by_principal_id"`
	HasExternalGuestInvitees          sql.NullBool   `json:"has_external_guest_invitees"`
	TrackLinkUsers                    sql.NullBool   `json:"track_link_users"`
	IsEphemeral                       sql.NullBool   `json:"is_ephemeral"`
	IsUnhealthy                       sql.NullBool   `json:"is_unhealthy"`
	IsAddressBarLink                  sql.NullBool   `json:"is_address_bar_link"`
	IsCreateOnlyLink                  sql.NullBool   `json:"is_create_only_link"`
	IsFormsLink                       sql.NullBool   `json:"is_forms_link"`
	IsMainLink                        sql.NullBool   `json:"is_main_link"`
	IsManageListLink                  sql.NullBool   `json:"is_manage_list_link"`
	AllowsAnonymousAccess             sql.NullBool   `json:"allows_anonymous_access"`
	Embeddable                        sql.NullBool   `json:"embeddable"`
	LimitUseToApplication             sql.NullBool   `json:"limit_use_to_application"`
	RestrictToExistingRelationships   sql.NullBool   `json:"restrict_to_existing_relationships"`
	BlocksDownload                    sql.NullBool   `json:"blocks_download"`
	RequiresPassword                  sql.NullBool   `json:"requires_password"`
	RestrictedMembership              sql.NullBool   `json:"restricted_membership"`
	InheritedFrom                     sql.NullString `json:"inherited_from"`
	ShareID                           sql.NullString `json:"share_id"`
	ShareToken                        sql.NullString `json:"share_token"`
	SharingLinkStatus                 sql.NullInt64  `json:"sharing_link_status"`
	AuditRunID                        sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) InsertSharingLink(ctx context.Context, arg InsertSharingLinkParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertSharingLink,
		arg.SiteID,
		arg.LinkID,
		arg.ItemGuid,
		arg.FileFolderUniqueID,
		arg.Url,
		arg.LinkKind,
		arg.Scope,
		arg.IsActive,
		arg.IsDefault,
		arg.IsEditLink,
		arg.IsReviewLink,
		arg.IsInherited,
		arg.CreatedAt,
		arg.CreatedByPrincipalID,
		arg.LastModifiedAt,
		arg.LastModifiedByPrincipalID,
		arg.TotalMembersCount,
		arg.Expiration,
		arg.PasswordLastModified,
		arg.PasswordLastModifiedByPrincipalID,
		arg.HasExternalGuestInvitees,
		arg.TrackLinkUsers,
		arg.IsEphemeral,
		arg.IsUnhealthy,
		arg.IsAddressBarLink,
		arg.IsCreateOnlyLink,
		arg.IsFormsLink,
		arg.IsMainLink,
		arg.IsManageListLink,
		arg.AllowsAnonymousAccess,
		arg.Embeddable,
		arg.LimitUseToApplication,
		arg.RestrictToExistingRelationships,
		arg.BlocksDownload,
		arg.RequiresPassword,
		arg.RestrictedMembership,
		arg.InheritedFrom,
		arg.ShareID,
		arg.ShareToken,
		arg.SharingLinkStatus,
		arg.AuditRunID,
	)
	var link_id string
	err := row.Scan(&link_id)
	return link_id, err
}

const upsertItemSensitivityLabel = `-- name: UpsertItemSensitivityLabel :exec
INSERT INTO sensitivity_labels (
  site_id,
  item_guid,
  label_id,
  display_name,
  owner_email,
  set_date,
  assignment_method,
  has_irm_protection,
  content_bits,
  label_flags,
  discovered_at,
  promotion_version,
  label_hash
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8,
  ?9,
  ?10,
  ?11,
  ?12,
  ?13
)
ON CONFLICT(site_id, item_guid) DO UPDATE SET
  label_id                = excluded.label_id,
  display_name            = excluded.display_name,
  owner_email             = excluded.owner_email,
  set_date                = excluded.set_date,
  assignment_method       = excluded.assignment_method,
  has_irm_protection      = excluded.has_irm_protection,
  content_bits            = excluded.content_bits,
  label_flags             = excluded.label_flags,
  discovered_at           = excluded.discovered_at,
  promotion_version       = excluded.promotion_version,
  label_hash              = excluded.label_hash
`

type UpsertItemSensitivityLabelParams struct {
	SiteID           int64          `json:"site_id"`
	ItemGuid         string         `json:"item_guid"`
	LabelID          sql.NullString `json:"label_id"`
	DisplayName      sql.NullString `json:"display_name"`
	OwnerEmail       sql.NullString `json:"owner_email"`
	SetDate          sql.NullTime   `json:"set_date"`
	AssignmentMethod sql.NullString `json:"assignment_method"`
	HasIrmProtection sql.NullBool   `json:"has_irm_protection"`
	ContentBits      sql.NullInt64  `json:"content_bits"`
	LabelFlags       sql.NullInt64  `json:"label_flags"`
	DiscoveredAt     sql.NullTime   `json:"discovered_at"`
	PromotionVersion sql.NullInt64  `json:"promotion_version"`
	LabelHash        sql.NullString `json:"label_hash"`
}

func (q *Queries) UpsertItemSensitivityLabel(ctx context.Context, arg UpsertItemSensitivityLabelParams) error {
	_, err := q.db.ExecContext(ctx, upsertItemSensitivityLabel,
		arg.SiteID,
		arg.ItemGuid,
		arg.LabelID,
		arg.DisplayName,
		arg.OwnerEmail,
		arg.SetDate,
		arg.AssignmentMethod,
		arg.HasIrmProtection,
		arg.ContentBits,
		arg.LabelFlags,
		arg.DiscoveredAt,
		arg.PromotionVersion,
		arg.LabelHash,
	)
	return err
}

const upsertRecipientLimits = `-- name: UpsertRecipientLimits :exec
INSERT INTO recipient_limits (
  site_id,
  check_permissions,
  grant_direct_access,
  share_link,
  share_link_with_defer_redeem
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5
)
ON CONFLICT(site_id) DO UPDATE SET
  check_permissions               = excluded.check_permissions,
  grant_direct_access             = excluded.grant_direct_access,
  share_link                      = excluded.share_link,
  share_link_with_defer_redeem    = excluded.share_link_with_defer_redeem,
  updated_at                      = CURRENT_TIMESTAMP
`

type UpsertRecipientLimitsParams struct {
	SiteID                   int64          `json:"site_id"`
	CheckPermissions         sql.NullString `json:"check_permissions"`
	GrantDirectAccess        sql.NullString `json:"grant_direct_access"`
	ShareLink                sql.NullString `json:"share_link"`
	ShareLinkWithDeferRedeem sql.NullString `json:"share_link_with_defer_redeem"`
}

func (q *Queries) UpsertRecipientLimits(ctx context.Context, arg UpsertRecipientLimitsParams) error {
	_, err := q.db.ExecContext(ctx, upsertRecipientLimits,
		arg.SiteID,
		arg.CheckPermissions,
		arg.GrantDirectAccess,
		arg.ShareLink,
		arg.ShareLinkWithDeferRedeem,
	)
	return err
}

const upsertSensitivityLabel = `-- name: UpsertSensitivityLabel :exec
INSERT INTO sensitivity_labels (
  site_id,
  item_guid,
  sensitivity_label_id,
  display_name,
  color,
  tooltip,
  has_irm_protection,
  sensitivity_label_protection_type
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8
)
ON CONFLICT(site_id, item_guid) DO UPDATE SET
  sensitivity_label_id                = excluded.sensitivity_label_id,
  display_name                        = excluded.display_name,
  color                               = excluded.color,
  tooltip                             = excluded.tooltip,
  has_irm_protection                  = excluded.has_irm_protection,
  sensitivity_label_protection_type   = excluded.sensitivity_label_protection_type
`

type UpsertSensitivityLabelParams struct {
	SiteID                         int64          `json:"site_id"`
	ItemGuid                       string         `json:"item_guid"`
	SensitivityLabelID             sql.NullString `json:"sensitivity_label_id"`
	DisplayName                    sql.NullString `json:"display_name"`
	Color                          sql.NullString `json:"color"`
	Tooltip                        sql.NullString `json:"tooltip"`
	HasIrmProtection               sql.NullBool   `json:"has_irm_protection"`
	SensitivityLabelProtectionType sql.NullString `json:"sensitivity_label_protection_type"`
}

func (q *Queries) UpsertSensitivityLabel(ctx context.Context, arg UpsertSensitivityLabelParams) error {
	_, err := q.db.ExecContext(ctx, upsertSensitivityLabel,
		arg.SiteID,
		arg.ItemGuid,
		arg.SensitivityLabelID,
		arg.DisplayName,
		arg.Color,
		arg.Tooltip,
		arg.HasIrmProtection,
		arg.SensitivityLabelProtectionType,
	)
	return err
}

const upsertSharingAbilities = `-- name: UpsertSharingAbilities :exec
INSERT INTO sharing_abilities (
  site_id,
  can_stop_sharing,
  anonymous_link_abilities,
  anyone_link_abilities,
  organization_link_abilities,
  people_sharing_link_abilities,
  direct_sharing_abilities
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7
)
ON CONFLICT(site_id) DO UPDATE SET
  can_stop_sharing                  = excluded.can_stop_sharing,
  anonymous_link_abilities          = excluded.anonymous_link_abilities,
  anyone_link_abilities             = excluded.anyone_link_abilities,
  organization_link_abilities       = excluded.organization_link_abilities,
  people_sharing_link_abilities     = excluded.people_sharing_link_abilities,
  direct_sharing_abilities          = excluded.direct_sharing_abilities,
  updated_at                        = CURRENT_TIMESTAMP
`

type UpsertSharingAbilitiesParams struct {
	SiteID                     int64          `json:"site_id"`
	CanStopSharing             sql.NullBool   `json:"can_stop_sharing"`
	AnonymousLinkAbilities     sql.NullString `json:"anonymous_link_abilities"`
	AnyoneLinkAbilities        sql.NullString `json:"anyone_link_abilities"`
	OrganizationLinkAbilities  sql.NullString `json:"organization_link_abilities"`
	PeopleSharingLinkAbilities sql.NullString `json:"people_sharing_link_abilities"`
	DirectSharingAbilities     sql.NullString `json:"direct_sharing_abilities"`
}

func (q *Queries) UpsertSharingAbilities(ctx context.Context, arg UpsertSharingAbilitiesParams) error {
	_, err := q.db.ExecContext(ctx, upsertSharingAbilities,
		arg.SiteID,
		arg.CanStopSharing,
		arg.AnonymousLinkAbilities,
		arg.AnyoneLinkAbilities,
		arg.OrganizationLinkAbilities,
		arg.PeopleSharingLinkAbilities,
		arg.DirectSharingAbilities,
	)
	return err
}

const upsertSharingGovernance = `-- name: UpsertSharingGovernance :exec

INSERT INTO sharing_governance (
  site_id,
  tenant_id,
  tenant_display_name,
  sharepoint_site_id,
  anonymous_link_expiration_restriction_days,
  anyone_link_track_users,
  can_add_external_principal,
  can_add_internal_principal,
  block_people_picker_and_sharing,
  can_request_access_for_grant_access,
  site_ib_mode,
  site_ib_segment_ids,
  enforce_ib_segment_filtering
) VALUES (
  ?1,
  ?2,
  ?3,
  ?4,
  ?5,
  ?6,
  ?7,
  ?8,
  ?9,
  ?10,
  ?11,
  ?12,
  ?13
)
ON CONFLICT(site_id) DO UPDATE SET
  tenant_id                                  = excluded.tenant_id,
  tenant_display_name                        = excluded.tenant_display_name,
  sharepoint_site_id                         = excluded.sharepoint_site_id,
  anonymous_link_expiration_restriction_days = excluded.anonymous_link_expiration_restriction_days,
  anyone_link_track_users                    = excluded.anyone_link_track_users,
  can_add_external_principal                 = excluded.can_add_external_principal,
  can_add_internal_principal                 = excluded.can_add_internal_principal,
  block_people_picker_and_sharing            = excluded.block_people_picker_and_sharing,
  can_request_access_for_grant_access        = excluded.can_request_access_for_grant_access,
  site_ib_mode                               = excluded.site_ib_mode,
  site_ib_segment_ids                        = excluded.site_ib_segment_ids,
  enforce_ib_segment_filtering               = excluded.enforce_ib_segment_filtering,
  updated_at                                 = CURRENT_TIMESTAMP
`

type UpsertSharingGovernanceParams struct {
	SiteID                                 int64          `json:"site_id"`
	TenantID                               sql.NullString `json:"tenant_id"`
	TenantDisplayName                      sql.NullString `json:"tenant_display_name"`
	SharepointSiteID                       sql.NullString `json:"sharepoint_site_id"`
	AnonymousLinkExpirationRestrictionDays sql.NullInt64  `json:"anonymous_link_expiration_restriction_days"`
	AnyoneLinkTrackUsers                   sql.NullBool   `json:"anyone_link_track_users"`
	CanAddExternalPrincipal                sql.NullBool   `json:"can_add_external_principal"`
	CanAddInternalPrincipal                sql.NullBool   `json:"can_add_internal_principal"`
	BlockPeoplePickerAndSharing            sql.NullBool   `json:"block_people_picker_and_sharing"`
	CanRequestAccessForGrantAccess         sql.NullBool   `json:"can_request_access_for_grant_access"`
	SiteIbMode                             sql.NullString `json:"site_ib_mode"`
	SiteIbSegmentIds                       sql.NullString `json:"site_ib_segment_ids"`
	EnforceIbSegmentFiltering              sql.NullBool   `json:"enforce_ib_segment_filtering"`
}

// ==================================
// Governance table queries
// ==================================
func (q *Queries) UpsertSharingGovernance(ctx context.Context, arg UpsertSharingGovernanceParams) error {
	_, err := q.db.ExecContext(ctx, upsertSharingGovernance,
		arg.SiteID,
		arg.TenantID,
		arg.TenantDisplayName,
		arg.SharepointSiteID,
		arg.AnonymousLinkExpirationRestrictionDays,
		arg.AnyoneLinkTrackUsers,
		arg.CanAddExternalPrincipal,
		arg.CanAddInternalPrincipal,
		arg.BlockPeoplePickerAndSharing,
		arg.CanRequestAccessForGrantAccess,
		arg.SiteIbMode,
		arg.SiteIbSegmentIds,
		arg.EnforceIbSegmentFiltering,
	)
	return err
}
