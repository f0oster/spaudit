// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sites.sql

package db

import (
	"context"
	"database/sql"
)

const getSiteByID = `-- name: GetSiteByID :one
SELECT site_id, site_url, title, created_at, updated_at
FROM sites
WHERE site_id = ?1
`

func (q *Queries) GetSiteByID(ctx context.Context, siteID int64) (Site, error) {
	row := q.db.QueryRowContext(ctx, getSiteByID, siteID)
	var i Site
	err := row.Scan(
		&i.SiteID,
		&i.SiteUrl,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSiteByURL = `-- name: GetSiteByURL :one
SELECT site_id, site_url, title, created_at, updated_at
FROM sites
WHERE site_url = ?1
`

func (q *Queries) GetSiteByURL(ctx context.Context, siteUrl string) (Site, error) {
	row := q.db.QueryRowContext(ctx, getSiteByURL, siteUrl)
	var i Site
	err := row.Scan(
		&i.SiteID,
		&i.SiteUrl,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSites = `-- name: ListSites :many
SELECT site_id, site_url, title, created_at, updated_at
FROM sites
ORDER BY title
`

func (q *Queries) ListSites(ctx context.Context) ([]Site, error) {
	rows, err := q.db.QueryContext(ctx, listSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Site
	for rows.Next() {
		var i Site
		if err := rows.Scan(
			&i.SiteID,
			&i.SiteUrl,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertSite = `-- name: UpsertSite :one
INSERT INTO sites (site_url, title, updated_at)
VALUES (?1, ?2, CURRENT_TIMESTAMP)
ON CONFLICT(site_url) DO UPDATE SET
  title=excluded.title,
  updated_at=excluded.updated_at
RETURNING site_id
`

type UpsertSiteParams struct {
	SiteUrl string         `json:"site_url"`
	Title   sql.NullString `json:"title"`
}

func (q *Queries) UpsertSite(ctx context.Context, arg UpsertSiteParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, upsertSite, arg.SiteUrl, arg.Title)
	var site_id int64
	err := row.Scan(&site_id)
	return site_id, err
}
