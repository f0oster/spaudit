// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webs.sql

package db

import (
	"context"
	"database/sql"
)

const getWeb = `-- name: GetWeb :one
SELECT site_id, web_id, url, title, template, has_unique, audit_run_id
FROM webs
WHERE site_id = ?1 AND web_id = ?2
`

type GetWebParams struct {
	SiteID int64  `json:"site_id"`
	WebID  string `json:"web_id"`
}

type GetWebRow struct {
	SiteID     int64          `json:"site_id"`
	WebID      string         `json:"web_id"`
	Url        sql.NullString `json:"url"`
	Title      sql.NullString `json:"title"`
	Template   sql.NullString `json:"template"`
	HasUnique  sql.NullBool   `json:"has_unique"`
	AuditRunID sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) GetWeb(ctx context.Context, arg GetWebParams) (GetWebRow, error) {
	row := q.db.QueryRowContext(ctx, getWeb, arg.SiteID, arg.WebID)
	var i GetWebRow
	err := row.Scan(
		&i.SiteID,
		&i.WebID,
		&i.Url,
		&i.Title,
		&i.Template,
		&i.HasUnique,
		&i.AuditRunID,
	)
	return i, err
}

const insertWeb = `-- name: InsertWeb :exec
INSERT INTO webs (site_id, web_id, url, title, template, has_unique, audit_run_id)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
`

type InsertWebParams struct {
	SiteID     int64          `json:"site_id"`
	WebID      string         `json:"web_id"`
	Url        sql.NullString `json:"url"`
	Title      sql.NullString `json:"title"`
	Template   sql.NullString `json:"template"`
	HasUnique  sql.NullBool   `json:"has_unique"`
	AuditRunID sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) InsertWeb(ctx context.Context, arg InsertWebParams) error {
	_, err := q.db.ExecContext(ctx, insertWeb,
		arg.SiteID,
		arg.WebID,
		arg.Url,
		arg.Title,
		arg.Template,
		arg.HasUnique,
		arg.AuditRunID,
	)
	return err
}

const listWebs = `-- name: ListWebs :many
SELECT w.site_id, w.web_id, w.url, w.title, w.template, w.has_unique, w.audit_run_id, s.site_url
FROM webs w
JOIN sites s ON w.site_id = s.site_id
ORDER BY s.site_url, w.title
`

type ListWebsRow struct {
	SiteID     int64          `json:"site_id"`
	WebID      string         `json:"web_id"`
	Url        sql.NullString `json:"url"`
	Title      sql.NullString `json:"title"`
	Template   sql.NullString `json:"template"`
	HasUnique  sql.NullBool   `json:"has_unique"`
	AuditRunID sql.NullInt64  `json:"audit_run_id"`
	SiteUrl    string         `json:"site_url"`
}

func (q *Queries) ListWebs(ctx context.Context) ([]ListWebsRow, error) {
	rows, err := q.db.QueryContext(ctx, listWebs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWebsRow
	for rows.Next() {
		var i ListWebsRow
		if err := rows.Scan(
			&i.SiteID,
			&i.WebID,
			&i.Url,
			&i.Title,
			&i.Template,
			&i.HasUnique,
			&i.AuditRunID,
			&i.SiteUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebsForSite = `-- name: ListWebsForSite :many
SELECT site_id, web_id, url, title, template, has_unique, audit_run_id
FROM webs
WHERE site_id = ?1
ORDER BY title
`

type ListWebsForSiteRow struct {
	SiteID     int64          `json:"site_id"`
	WebID      string         `json:"web_id"`
	Url        sql.NullString `json:"url"`
	Title      sql.NullString `json:"title"`
	Template   sql.NullString `json:"template"`
	HasUnique  sql.NullBool   `json:"has_unique"`
	AuditRunID sql.NullInt64  `json:"audit_run_id"`
}

func (q *Queries) ListWebsForSite(ctx context.Context, siteID int64) ([]ListWebsForSiteRow, error) {
	rows, err := q.db.QueryContext(ctx, listWebsForSite, siteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWebsForSiteRow
	for rows.Next() {
		var i ListWebsForSiteRow
		if err := rows.Scan(
			&i.SiteID,
			&i.WebID,
			&i.Url,
			&i.Title,
			&i.Template,
			&i.HasUnique,
			&i.AuditRunID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
