package analytics

import (
	"fmt"
	"spaudit/interfaces/web/presenters"
)

// SharingLinkTypeBreakdown renders breakdown of sharing link types
templ SharingLinkTypeBreakdown(analytics presenters.ListAnalytics) {
	if analytics.SharingLinkCount > 0 {
		<div>
			<h4 class="text-sm font-semibold text-slate-800 mb-4">Sharing Link Types</h4>
			<div class="space-y-3">
				@SharingLinkTypeCard(analytics.FlexibleLinksCount, "Flexible Links", "blue")
				@SharingLinkTypeCard(analytics.OrganizationViewCount, "Organization View", "emerald")
				@SharingLinkTypeCard(analytics.OrganizationEditCount, "Organization Edit", "amber")
				@SharingLinkTypeCard(analytics.AnonymousViewCount, "Anonymous View", "orange")
				@SharingLinkTypeCard(analytics.AnonymousEditCount, "Anonymous Edit", "red")
				@SharingLinkTypeCard(analytics.DirectLinksCount, "Direct Links", "purple")
				@SharingLinkTypeCard(analytics.OtherLinksCount, "Other Links", "slate")
			</div>
		</div>
	}
}

// SharingLinkTypeCard renders individual sharing link type card
templ SharingLinkTypeCard(count int, linkType string, colorClass string) {
	if count > 0 {
		<div class={ "flex items-center justify-between p-3 bg-gradient-to-r rounded-lg border", getSharingLinkCardClasses(colorClass) }>
			<div class="flex items-center gap-3">
				<div class={ "w-3 h-3 rounded-full", getSharingLinkDotClass(colorClass) }></div>
				<span class={ "text-sm font-medium", getSharingLinkTextClass(colorClass) }>{ linkType }</span>
			</div>
			<span class={ "text-lg font-bold", getSharingLinkCountClass(colorClass) }>{ fmt.Sprintf("%d", count) }</span>
		</div>
	}
}

func getSharingLinkCardClasses(colorClass string) string {
	switch colorClass {
	case "blue":
		return "from-blue-50 to-blue-100 border-blue-200"
	case "emerald":
		return "from-emerald-50 to-emerald-100 border-emerald-200"
	case "amber":
		return "from-amber-50 to-amber-100 border-amber-200"
	case "orange":
		return "from-orange-50 to-orange-100 border-orange-200"
	case "red":
		return "from-red-50 to-red-100 border-red-200"
	case "purple":
		return "from-purple-50 to-purple-100 border-purple-200"
	case "slate":
		return "from-slate-50 to-slate-100 border-slate-200"
	default:
		return "from-slate-50 to-slate-100 border-slate-200"
	}
}

func getSharingLinkDotClass(colorClass string) string {
	switch colorClass {
	case "blue":
		return "bg-blue-500"
	case "emerald":
		return "bg-emerald-500"
	case "amber":
		return "bg-amber-500"
	case "orange":
		return "bg-orange-500"
	case "red":
		return "bg-red-500"
	case "purple":
		return "bg-purple-500"
	case "slate":
		return "bg-slate-500"
	default:
		return "bg-slate-500"
	}
}

func getSharingLinkTextClass(colorClass string) string {
	switch colorClass {
	case "blue":
		return "text-blue-800"
	case "emerald":
		return "text-emerald-800"
	case "amber":
		return "text-amber-800"
	case "orange":
		return "text-orange-800"
	case "red":
		return "text-red-800"
	case "purple":
		return "text-purple-800"
	case "slate":
		return "text-slate-800"
	default:
		return "text-slate-800"
	}
}

func getSharingLinkCountClass(colorClass string) string {
	switch colorClass {
	case "blue":
		return "text-blue-700"
	case "emerald":
		return "text-emerald-700"
	case "amber":
		return "text-amber-700"
	case "orange":
		return "text-orange-700"
	case "red":
		return "text-red-700"
	case "purple":
		return "text-purple-700"
	case "slate":
		return "text-slate-700"
	default:
		return "text-slate-700"
	}
}