package components

import (
	"fmt"
	"strconv"
	
	"spaudit/interfaces/web/presenters"
)

templ AuditRunSelector(siteID int64, currentAuditRunID int64, auditRuns []presenters.AuditRunOption) {
	<div class="audit-run-selector mb-4">
		<label for="audit-run-select" class="block text-sm font-medium text-gray-700 mb-2">
			Audit Run:
		</label>
		<select 
			id="audit-run-select" 
			name="audit_run_id"
			class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
			hx-post={ fmt.Sprintf("/sites/%d/switch-audit-run", siteID) }
			hx-trigger="change"
			hx-target="body"
			hx-push-url="true"
		>
			for _, run := range auditRuns {
				<option 
					value={ strconv.FormatInt(run.ID, 10) }
					if run.ID == currentAuditRunID {
						selected
					}
				>
					{ formatAuditRunDisplay(run) }
				</option>
			}
		</select>
	</div>
}

func formatAuditRunDisplay(run presenters.AuditRunOption) string {
	timeStr := run.StartedAt.Format("Jan 2, 2006 3:04 PM")
	if run.Status == "completed" {
		return fmt.Sprintf("%s (completed)", timeStr)
	} else if run.Status == "running" {
		return fmt.Sprintf("%s (running)", timeStr)
	} else if run.Status == "failed" {
		return fmt.Sprintf("%s (failed)", timeStr)
	}
	return fmt.Sprintf("%s (%s)", timeStr, run.Status)
}