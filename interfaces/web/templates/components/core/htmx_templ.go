// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package core

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func HTMXConfig() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\r\n\t\t// Global HTMX configuration\r\n\t\thtmx.config.defaultSwapStyle = 'innerHTML';\r\n\t\thtmx.config.globalViewTransitions = true;\r\n\t\thtmx.config.timeout = 10000; // 10 second timeout\r\n\t\thtmx.config.historyEnabled = true;\r\n\t\thtmx.config.refreshOnHistoryMiss = true;\r\n\t\t\r\n\t\t// Enhanced error handling with better UX\r\n\t\tdocument.body.addEventListener('htmx:responseError', function(evt) {\r\n\t\t\tconst target = evt.detail.target;\r\n\t\t\tconst status = evt.detail.xhr.status;\r\n\t\t\t\r\n\t\t\t// Show contextual error message\r\n\t\t\tlet message = 'Request failed. Please try again.';\r\n\t\t\tif (status === 404) message = 'Resource not found.';\r\n\t\t\telse if (status === 403) message = 'Access denied.';\r\n\t\t\telse if (status === 500) message = 'Server error occurred.';\r\n\t\t\t\r\n\t\t\t// Try to show error in target element first\r\n\t\t\tif (target && target.id) {\r\n\t\t\t\tconst errorHtml = `<div class=\"htmx-error p-3 rounded-lg\" role=\"alert\" aria-live=\"assertive\">${message}</div>`;\r\n\t\t\t\ttarget.innerHTML = errorHtml;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tif (target.innerHTML === errorHtml) {\r\n\t\t\t\t\t\ttarget.innerHTML = '<div class=\"text-slate-500 text-sm p-3\">Content temporarily unavailable.</div>';\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 5000);\r\n\t\t\t} else {\r\n\t\t\t\t// Fallback to toast notification\r\n\t\t\t\tshowToast(message, 'error');\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// Enhanced timeout handling\r\n\t\tdocument.body.addEventListener('htmx:timeout', function(evt) {\r\n\t\t\tconst target = evt.detail.target;\r\n\t\t\tconst message = 'Request timed out. Please try again.';\r\n\t\t\t\r\n\t\t\tif (target && target.id) {\r\n\t\t\t\tconst errorHtml = `<div class=\"htmx-error p-3 rounded-lg\" role=\"alert\" aria-live=\"assertive\">\r\n\t\t\t\t\t<div class=\"flex items-center gap-2\">\r\n\t\t\t\t\t\t<span role=\"img\" aria-label=\"Warning\">‚è∞</span>\r\n\t\t\t\t\t\t<span>${message}</span>\r\n\t\t\t\t\t\t<button onclick=\"this.parentElement.parentElement.remove()\" class=\"ml-auto text-red-600 hover:text-red-800\" aria-label=\"Dismiss\">&times;</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>`;\r\n\t\t\t\ttarget.innerHTML = errorHtml;\r\n\t\t\t} else {\r\n\t\t\t\tshowToast(message, 'error');\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// Remove loading states on completion\r\n\t\tdocument.body.addEventListener('htmx:afterRequest', function(evt) {\r\n\t\t\tconst loadingElements = document.querySelectorAll('.loading');\r\n\t\t\tloadingElements.forEach(el => el.classList.remove('loading'));\r\n\t\t});\r\n\t\t\r\n\t\t// Enhanced loading state management\r\n\t\tdocument.body.addEventListener('htmx:beforeRequest', function(evt) {\r\n\t\t\tconst element = evt.detail.elt;\r\n\t\t\tconst target = evt.detail.target;\r\n\t\t\t\r\n\t\t\tif (evt.detail.boosted) {\r\n\t\t\t\tdocument.body.style.cursor = 'wait';\r\n\t\t\t\tdocument.body.classList.add('htmx-request');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Add loading class to triggering element\r\n\t\t\tif (element) {\r\n\t\t\t\telement.classList.add('htmx-loading');\r\n\t\t\t\t\r\n\t\t\t\t// Disable buttons during request to prevent double-submission\r\n\t\t\t\tif (element.tagName === 'BUTTON') {\r\n\t\t\t\t\telement.disabled = true;\r\n\t\t\t\t\telement.setAttribute('data-htmx-loading', 'true');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Show loading state on target if it has a loading placeholder\r\n\t\t\tif (target) {\r\n\t\t\t\tconst loadingElement = target.querySelector('.loading-placeholder');\r\n\t\t\t\tif (loadingElement) {\r\n\t\t\t\t\tloadingElement.style.display = 'block';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tdocument.body.addEventListener('htmx:afterRequest', function(evt) {\r\n\t\t\tif (evt.detail.boosted) {\r\n\t\t\t\tdocument.body.style.cursor = '';\r\n\t\t\t\tdocument.body.classList.remove('htmx-request');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Clear any existing loading states\r\n\t\t\tdocument.querySelectorAll('.htmx-loading').forEach(el => {\r\n\t\t\t\tel.classList.remove('htmx-loading');\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// Re-enable any disabled buttons\r\n\t\t\tdocument.querySelectorAll('button[disabled][data-htmx-loading]').forEach(button => {\r\n\t\t\t\tbutton.disabled = false;\r\n\t\t\t\tbutton.removeAttribute('data-htmx-loading');\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\t// Toast notification system for better error feedback\r\n\t\tfunction showToast(message, type = 'info', duration = 5000) {\r\n\t\t\tconst toast = document.createElement('div');\r\n\t\t\ttoast.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transition-all duration-300 transform translate-x-full`;\r\n\t\t\t\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 'error':\r\n\t\t\t\t\ttoast.className += ' bg-red-50 border-red-200 text-red-800 border';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'success':\r\n\t\t\t\t\ttoast.className += ' bg-green-50 border-green-200 text-green-800 border';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'warning':\r\n\t\t\t\t\ttoast.className += ' bg-amber-50 border-amber-200 text-amber-800 border';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\ttoast.className += ' bg-blue-50 border-blue-200 text-blue-800 border';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttoast.innerHTML = `\r\n\t\t\t\t<div class=\"flex items-start gap-3\">\r\n\t\t\t\t\t<div class=\"flex-1\">\r\n\t\t\t\t\t\t<p class=\"text-sm font-medium\">${message}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button onclick=\"this.parentElement.parentElement.remove()\" class=\"flex-shrink-0 text-current opacity-70 hover:opacity-100\" aria-label=\"Dismiss\">\r\n\t\t\t\t\t\t<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t`;\r\n\t\t\t\r\n\t\t\ttoast.setAttribute('role', type === 'error' ? 'alert' : 'status');\r\n\t\t\ttoast.setAttribute('aria-live', type === 'error' ? 'assertive' : 'polite');\r\n\t\t\t\r\n\t\t\tdocument.body.appendChild(toast);\r\n\t\t\t\r\n\t\t\t// Animate in\r\n\t\t\trequestAnimationFrame(() => {\r\n\t\t\t\ttoast.style.transform = 'translateX(0)';\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// Auto-dismiss\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (document.body.contains(toast)) {\r\n\t\t\t\t\ttoast.style.transform = 'translateX(100%)';\r\n\t\t\t\t\tsetTimeout(() => toast.remove(), 300);\r\n\t\t\t\t}\r\n\t\t\t}, duration);\r\n\t\t}\r\n\t\t\r\n\t\t// Make toast function globally available\r\n\t\twindow.showToast = showToast;\r\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func HTMXForm(endpoint string, targetID string, method string, loadingID string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<form")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if method == "post" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " hx-post=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(endpoint)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 170, Col: 21}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(endpoint)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 172, Col: 20}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " hx-target=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs("#" + targetID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 174, Col: 28}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" hx-swap=\"innerHTML\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if loadingID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, " hx-indicator=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs("#" + loadingID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 177, Col: 33}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " hx-on::before-request=\"this.classList.add('loading')\" hx-on::after-request=\"this.classList.remove('loading')\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var2.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "</form>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func HTMXButton(endpoint string, targetID string, method string, loadingID string, buttonText string, buttonClass string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var8 = []any{buttonClass}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var8...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<button class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var8).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if method == "post" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, " hx-post=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var10 string
			templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(endpoint)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 190, Col: 21}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, " hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(endpoint)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 192, Col: 20}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, " hx-target=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs("#" + targetID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 194, Col: 28}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\" hx-swap=\"innerHTML\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if loadingID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, " hx-indicator=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs("#" + loadingID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 197, Col: 33}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, " hx-on::before-request=\"this.classList.add('loading')\" hx-on::after-request=\"this.classList.remove('loading')\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(buttonText)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 202, Col: 14}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "</button> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if loadingID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<div id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 string
			templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(loadingID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `interfaces/web/templates/components/core/htmx.templ`, Line: 205, Col: 21}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" class=\"htmx-indicator inline-flex items-center gap-2 text-sm text-slate-500\"><div class=\"animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full\"></div><span>Loading...</span></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
